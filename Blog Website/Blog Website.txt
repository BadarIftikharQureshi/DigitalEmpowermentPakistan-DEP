Blog Website WIth CRUD Function :
-----------------------------------------------


app.js :
---------------------------------------------------------------------------------------------

const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const methodOverride = require('method-override');
require('dotenv').config();

const app = express();

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(methodOverride('_method'));
app.use(express.static('public'));
app.set('view engine', 'ejs');

// Routes
app.use('/posts', require('./routes/posts'));

app.get('/', (req, res) => {
    res.redirect('/posts');
});

const PORT = process.env.PORT || 1337;
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});


posts.js :
---------------------------------------------------------------




const express = require('express');
const router = express.Router();
const Post = require('../models/post');

// INDEX - Show all posts
router.get('/', async (req, res) => {
    const posts = await Post.find({});
    res.render('index', { posts });
});

// NEW - Show form to create a new post
router.get('/new', (req, res) => {
    res.render('new');
});

// CREATE - Add new post to the database
router.post('/', async (req, res) => {
    await Post.create(req.body);
    res.redirect('/posts');
});

// SHOW - Show more info about one post
router.get('/:id', async (req, res) => {
    const post = await Post.findById(req.params.id);
    res.render('show', { post });
});

// EDIT - Show form to edit a post
router.get('/:id/edit', async (req, res) => {
    const post = await Post.findById(req.params.id);
    res.render('edit', { post });
});

// UPDATE - Update a particular post
router.put('/:id', async (req, res) => {
    await Post.findByIdAndUpdate(req.params.id, req.body);
    res.redirect(`/posts/${req.params.id}`);
});

// DELETE - Delete a particular post
router.delete('/:id', async (req, res) => {
    await Post.findByIdAndDelete(req.params.id);
    res.redirect('/posts');
});

module.exports = router;


post.js :
----------------------------------------------------------------

const mongoose = require('mongoose');

const postSchema = new mongoose.Schema({
    title: {
        type: String,
        required: true
    },
    content: {
        type: String,
        required: true
    },
    createdAt: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model('Post', postSchema);

index :
-----------------------------------------------------------------



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blog</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <div class="container">
        <h1>All Blog Posts</h1>
        <a href="/posts/new">Create New Post</a>
        <ul>
            <% posts.forEach(post => { %>
                <li>
                    <a href="/posts/<%= post._id %>"><%= post.title %></a>
                    <a href="/posts/<%= post._id %>/edit">Edit</a>
                    <form action="/posts/<%= post._id %>?_method=DELETE" method="POST" style="display:inline;">
                        <button type="submit">Delete</button>
                    </form>
                </li>
            <% }) %>
        </ul>
    </div>
</body>
</html>


new :
---------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create New Post</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <div class="container">
        <h1>Create New Post</h1>
        <form action="/posts" method="POST">
            <label for="title">Title:</label>
            <input type="text" name="title" required>
            <label for="content">Content:</label>
            <textarea name="content" required></textarea>
            <button type="submit">Create Post</button>
        </form>
    </div>
</body>
</html>

show :
-----------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= post.title %></title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <div class="container">
        <h1><%= post.title %></h1>
        <p><%= post.content %></p>
        <a href="/posts/<%= post._id %>/edit">Edit Post</a>
        <form action="/posts/<%= post._id %>?_method=DELETE" method="POST">
            <button type="submit">Delete Post</button>
        </form>
        <a href="/posts">Back to Posts</a>
    </div>
</body>
</html>

Edit :
-----------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Post</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <div class="container">
        <h1>Edit Post</h1>
        <form action="/posts/<%= post._id %>?_method=PUT" method="POST">
            <label for="title">Title:</label>
            <input type="text" name="title" value="<%= post.title %>" required>
            <label for="content">Content:</label>
            <textarea name="content" required><%= post.content %></textarea>
            <button type="submit">Update Post</button>
        </form>
        <a href="/posts/<%= post._id %>">Cancel</a>
    </div>
</body>
</html>

styles :
------------------------------------------------------------------------------------

body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.container {
    width: 90%;
    max-width: 800px;
    background: #fff;
    padding: 20px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    border-radius: 5px;
}

h1 {
    text-align: center;
}

form {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 20px;
}

input, textarea {
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

button {
    padding: 10px;
    font-size: 16px;
    color: #fff;
    background-color: #4CAF50;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

    button:hover {
        background-color: #45a049;
    }

ul {
    list-style-type: none;
    padding: 0;
}

li {
    margin: 10px 0;
}

a {
    text-decoration: none;
    color: #4CAF50;
}

    a:hover {
        text-decoration: underline;
    }

form.inline {
    display: inline;
}

    form.inline button {
        background: #f44336;
    }

        form.inline button:hover {
            background: #e53935;
        }



